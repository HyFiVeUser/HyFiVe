[
    {
        "id": "9529359d14068ac5",
        "type": "tab",
        "label": "ChangeLog",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "235d79d7c2f26625",
        "type": "tab",
        "label": "MainFlows",
        "disabled": false,
        "info": "was"
    },
    {
        "id": "d143a3ea3215a888",
        "type": "tab",
        "label": "netcdf",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a7640f54044b40e8",
        "type": "tab",
        "label": "updateConfig",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1df76267ee5a734d",
        "type": "tab",
        "label": "TestFunctionality",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f9a071104f7b9747",
        "type": "group",
        "z": "a7640f54044b40e8",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.26",
            "label": true
        },
        "nodes": [
            "6983f4d8adcb8a37",
            "04932228151bb3e1",
            "5a97be4b588ea048",
            "67f70b73cadd6e36",
            "59f7e26c8f198da8",
            "27547ac16eab95dc",
            "1f15e4d48c97e4b9",
            "8cedbafa10c85741",
            "777e12fa71c60579",
            "dc83fec491f83bcf",
            "7bd0c79a8dea08fa",
            "4f436ed398bbf462",
            "f89c237b44c64fb9",
            "cc0b69940f13e83b",
            "a315a853ec8dc09c"
        ],
        "x": 14,
        "y": 695,
        "w": 892,
        "h": 446
    },
    {
        "id": "c7c31a610a242b5f",
        "type": "group",
        "z": "a7640f54044b40e8",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "0ace35db30d4953e",
            "e67ed41c79173685",
            "c7822a6dcfb0c519",
            "a86b62abb6ece876"
        ],
        "x": 24,
        "y": 1639,
        "w": 762,
        "h": 149.5
    },
    {
        "id": "c393d8003f696aac",
        "type": "group",
        "z": "a7640f54044b40e8",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.26",
            "label": true
        },
        "nodes": [
            "c30522b47bb35d27",
            "811c258fa2c83e91",
            "87cc93507f069455",
            "e6e954700566bcc1",
            "00cc014aa1d9f0b4"
        ],
        "x": 954,
        "y": 699,
        "w": 462,
        "h": 222
    },
    {
        "id": "eac9bebee6277097",
        "type": "group",
        "z": "a7640f54044b40e8",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "fill-opacity": "0.25"
        },
        "nodes": [
            "d5b4eafcc8f0fb5e",
            "2ab916f1a24e3feb",
            "5ca61240eca739c3",
            "b7994222712a21eb",
            "1d8d02f13c390148",
            "7a407bab81402bd4",
            "b554f318d1f434f2",
            "9b0ae5c331b4cf39",
            "7feed9df617cd76f",
            "f276d9d25a5d4f73",
            "42210e89f93227cd",
            "b8eaf7c8df1d2656",
            "db5690b938d47abf",
            "9f85214ffb77e09d",
            "9948feda627a1911",
            "d7202305318b12f7"
        ],
        "x": 14,
        "y": 243,
        "w": 1412,
        "h": 405.5
    },
    {
        "id": "7711c0707ebb443d",
        "type": "group",
        "z": "a7640f54044b40e8",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "ecf885b39c03e8a7",
            "7f79980cdfb8e10e",
            "c9b6d386c0e8e6c3",
            "b79ad6b4ad127a99"
        ],
        "x": 14,
        "y": 15,
        "w": 792,
        "h": 193.5
    },
    {
        "id": "b16a84d1423b2704",
        "type": "group",
        "z": "d143a3ea3215a888",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.27",
            "label": true
        },
        "nodes": [
            "0d068ad7ffa1d2a0",
            "89f0984a49737a4f",
            "1b4e817521d2401a",
            "9cb25a899b7cec62",
            "2e1b8c984a1cfb2a",
            "1fd2e10d6d0a9909",
            "4fad76eba46d667a",
            "11778414c7dc8a22",
            "ba54b73ee447a343",
            "336f8bd1f37e5372",
            "9da6eeccf3a03abe"
        ],
        "x": 24,
        "y": 15,
        "w": 1332,
        "h": 406
    },
    {
        "id": "802fcbdea71ca4de",
        "type": "group",
        "z": "1df76267ee5a734d",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "be17ab4d342f61da",
            "84647e78a544dafa",
            "9e562fe175dc8959",
            "e09b1cb407eeb036",
            "79582086a8c792f7",
            "cfb73944982d7e59",
            "38d4d5b3d57e36bd",
            "250ac6bd7b36f893",
            "ee9ee001bd91fe92",
            "4df787757bfcb278",
            "4bf3b174ee70ecfd",
            "f7aac55c9e7bc23f"
        ],
        "x": 34,
        "y": 19,
        "w": 1112,
        "h": 442
    },
    {
        "id": "e3a51bcf9ce90b3a",
        "type": "group",
        "z": "235d79d7c2f26625",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "c088b5a58a400b81",
            "40732747272089ce",
            "9b79aa0b93f5fe69",
            "9672faf7256c33cd",
            "e8626651bd1f92c0",
            "307ad4e15609ed38",
            "72f255931df7aa4e"
        ],
        "x": 24,
        "y": 27,
        "w": 932,
        "h": 194
    },
    {
        "id": "d235e8af49b8ee75",
        "type": "group",
        "z": "235d79d7c2f26625",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.24",
            "label": true
        },
        "nodes": [
            "2e67ef5c2b79a087",
            "8465c9da0d1737cd",
            "b78cf2e5ebb1fad6",
            "53c5c3bd05b33452",
            "3516da098d750ae6",
            "0035eb8d27960abc",
            "cf836f97f67354e4",
            "1a4ed3d0ccd679f3",
            "3694f73ab0251d57",
            "152d82c1f6572be3",
            "6ec1fb246bc5c580"
        ],
        "x": 24,
        "y": 247,
        "w": 1222,
        "h": 294
    },
    {
        "id": "05c65e7773bbf544",
        "type": "group",
        "z": "235d79d7c2f26625",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "1a184bbc90b12b9a",
            "9e4316360e614887",
            "bb4e6c9996a8b0ed"
        ],
        "x": 24,
        "y": 939,
        "w": 512,
        "h": 122
    },
    {
        "id": "4f91b51bd3efcaf6",
        "type": "group",
        "z": "235d79d7c2f26625",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.26",
            "label": true
        },
        "nodes": [
            "577f9431848c9e62",
            "c0a6a9e3b388938a",
            "32b4d1856c206b65",
            "f4403be171a169fb",
            "3a82dd7311e8e67e",
            "2148df5e37d2f0e5",
            "6e029079894d4dae",
            "87d216e25d86edb3",
            "38ca7b97b69cad81"
        ],
        "x": 24,
        "y": 579,
        "w": 1272,
        "h": 162
    },
    {
        "id": "5322a4b4ebd1973d",
        "type": "group",
        "z": "9529359d14068ac5",
        "name": "",
        "style": {
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "1b94e42f4d315e50",
            "3cd15dcb278028a6",
            "a13016dd157a6600"
        ],
        "x": 34,
        "y": 39,
        "w": 402,
        "h": 238
    },
    {
        "id": "3bfe4bdefc848c91",
        "type": "group",
        "z": "9529359d14068ac5",
        "name": "",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "stroke": "#0070c0"
        },
        "nodes": [
            "d0ea2e479f49b45e",
            "6676b699f227fb63",
            "2e3a7749cfce61ae",
            "edf03a581c6a235c",
            "c0fe4342fac3ff09",
            "730e2bf22a161fe5",
            "badb468f698b04eb",
            "0f95bff7b080996a"
        ],
        "x": 34,
        "y": 319,
        "w": 812,
        "h": 902
    },
    {
        "id": "eb38eefd71aee74d",
        "type": "group",
        "z": "1df76267ee5a734d",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.25",
            "label": true
        },
        "nodes": [
            "687c3af5de393187",
            "e871af5d042cd0a1",
            "760ea99ca3aa6fd8",
            "f7484f1dad32a2b9",
            "505b6b7957eb6d72"
        ],
        "x": 14,
        "y": 499,
        "w": 1202,
        "h": 142
    },
    {
        "id": "75a251e6f08db58f",
        "type": "group",
        "z": "a7640f54044b40e8",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.26",
            "label": true
        },
        "nodes": [
            "a62f8d250c55ec19",
            "4bb68e3d55373dc6",
            "31bec43e99c71e07",
            "f3ac1bcfa9936d3b",
            "1b0605e0fe1856de",
            "4c6d05738c671c26",
            "39d746e1c9dba74c",
            "22c7cf8f4f92b694",
            "95b88dedb987387f",
            "9fb9e0128caa5441",
            "a00c80cd5e72cb28",
            "80f4100bb2e7945a",
            "766b5e068fbf424d",
            "dd6973f88d73ed5b",
            "42cfc5d954434379"
        ],
        "x": 24,
        "y": 1155,
        "w": 842,
        "h": 446
    },
    {
        "id": "c650078577625659",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "LocalInflux",
        "usetls": false,
        "tls": "c8f010c74bee9135",
        "influxdbVersion": "2.0",
        "url": "http://influxDB:8086",
        "timeout": "",
        "rejectUnauthorized": true
    },
    {
        "id": "ed4cd49e795775da",
        "type": "mqtt-broker",
        "name": "RUT955",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c8f010c74bee9135",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "1062df4f6e8d4e3c",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "",
        "password": ""
    },
    {
        "id": "1510af957dea04fd",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "4e41f0dbfaeb30e2",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a28c5920a6216eb7",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "0adf19cfbb60aa4b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ostseeforschung.info",
        "port": "8883",
        "tls": "c8f010c74bee9135",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7f445ca17cf754e2",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e1feb3ca28693896",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "8e0afad26e8060cc",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "d3a9cb7b124eeb94",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ostseeforschung.info",
        "port": "8883",
        "tls": "c8f010c74bee9135",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d5bc607ae6364bf5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1ad8ce79b221484a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "0b4c116fa302a5fe",
        "type": "influxdb",
        "hostname": "mqtt-influx.ostseeforschung.info",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "IOW",
        "usetls": false,
        "tls": "c8f010c74bee9135",
        "influxdbVersion": "2.0",
        "url": "https://mqtt-influx.ostseeforschung.info",
        "rejectUnauthorized": true
    },
    {
        "id": "ae6698d6de6d7f63",
        "type": "mqtt-broker",
        "name": "MathisPhone",
        "broker": "100.99.211.65",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c2f8329459b812c1",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "43e227d5a7e3d711",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Laptop",
        "usetls": false,
        "tls": "c8f010c74bee9135",
        "influxdbVersion": "2.0",
        "url": "http://172.17.0.1:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "fe905591c579d7c8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5d91884e0a1ba278",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "9818285b979a8514",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ostseeforschung.info",
        "port": "8883",
        "tls": "c8f010c74bee9135",
        "clientid": "",
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "289b39d02de9d5c3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "42960f7d49201865",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "45a3b4a419220e21",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "093b1b3c1f55bebc",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "2a7d7f357cd358c9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ostseeforschung.info",
        "port": "8883",
        "tls": "c8f010c74bee9135",
        "clientid": "",
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "883aeebc459475e2",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e43b951b5fb49639",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "bcd2a686c2ae1b0f",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "90dd2bdad400256e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ostseeforschung.info",
        "port": "8883",
        "tls": "c8f010c74bee9135",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1a1d7b1780194542",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "fa0cc7efae604a91",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "8ab2403886c90a8a",
        "type": "influxdb",
        "hostname": "mqtt-influx.ostseeforschung.info",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "IOW",
        "usetls": false,
        "tls": "c8f010c74bee9135",
        "influxdbVersion": "2.0",
        "url": "https://mqtt-influx.ostseeforschung.info",
        "rejectUnauthorized": true
    },
    {
        "id": "f5794bc5aafe5619",
        "type": "mqtt-broker",
        "name": "MathisPhone",
        "broker": "100.99.211.65",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "91f48efb0c147d40",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "e82c5487fba28e12",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Laptop",
        "usetls": false,
        "tls": "c8f010c74bee9135",
        "influxdbVersion": "2.0",
        "url": "http://172.17.0.1:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "af784df94f7d7f0f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "592217e67e8020db",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "ee4d7964dda133c6",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ostseeforschung.info",
        "port": "8883",
        "tls": "c8f010c74bee9135",
        "clientid": "",
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c5d604a3ff2b2883",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f64c2d8f1f48fc78",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "3816b63d8bd98fec",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "26d7c3a1b4c523ae",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "de0d0c7fa416f32e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ostseeforschung.info",
        "port": "8883",
        "tls": "c8f010c74bee9135",
        "clientid": "",
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f4eb4615ffefd018",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f7153034329443f2",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "835c0258fe0a93c6",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3a65b61f9cfa32f9",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "4fdd85ee0b2f4a94",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.ostseeforschung.info",
        "port": "8883",
        "tls": "c8f010c74bee9135",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b4f1cbcbf7c0984a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "283305862bddf51b",
        "type": "SFTP-credentials",
        "host": "hyfive.info",
        "port": "22",
        "username": "loggermailbox",
        "password": ""
    },
    {
        "id": "d0ea2e479f49b45e",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "3bfe4bdefc848c91",
        "name": "CURRENT VERSION: 06.08.2024",
        "info": "",
        "x": 200,
        "y": 400,
        "wires": []
    },
    {
        "id": "1b94e42f4d315e50",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "5322a4b4ebd1973d",
        "name": "FLOW FOR HYFIVE DECKBOX",
        "info": "",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "a13016dd157a6600",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "5322a4b4ebd1973d",
        "name": "After every change: \\n EDIT CHANGE LOG \\n Change date of 'Current Version' \\n Export and commit flow to Github",
        "info": "",
        "x": 200,
        "y": 200,
        "wires": []
    },
    {
        "id": "3cd15dcb278028a6",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "5322a4b4ebd1973d",
        "name": "For detailed info check Github documentation",
        "info": "",
        "x": 240,
        "y": 120,
        "wires": []
    },
    {
        "id": "6676b699f227fb63",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "3bfe4bdefc848c91",
        "name": "x",
        "info": "",
        "x": 770,
        "y": 1180,
        "wires": []
    },
    {
        "id": "2e3a7749cfce61ae",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "3bfe4bdefc848c91",
        "name": "Format: Date -      Contributor -       Short description of changes",
        "info": "",
        "x": 270,
        "y": 460,
        "wires": []
    },
    {
        "id": "edf03a581c6a235c",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "3bfe4bdefc848c91",
        "name": "05.08.2024 - Mathis Björner - changed the way data is passed after creating the query for GPS",
        "info": "",
        "x": 380,
        "y": 540,
        "wires": []
    },
    {
        "id": "c0fe4342fac3ff09",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "3bfe4bdefc848c91",
        "name": "04.08.2024 - Stanislas Klein - Clean up and documentation of current version",
        "info": "",
        "x": 330,
        "y": 500,
        "wires": []
    },
    {
        "id": "730e2bf22a161fe5",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "3bfe4bdefc848c91",
        "name": "06.08.2024 - Frederik Furkert - New Layout, extended docu, testing with Hensel logger, small bug fixes",
        "info": "",
        "x": 410,
        "y": 580,
        "wires": []
    },
    {
        "id": "badb468f698b04eb",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "3bfe4bdefc848c91",
        "name": "CHANGE LOG",
        "info": "",
        "x": 140,
        "y": 360,
        "wires": []
    },
    {
        "id": "0f95bff7b080996a",
        "type": "comment",
        "z": "9529359d14068ac5",
        "g": "3bfe4bdefc848c91",
        "name": "11.10.2024 - Stanislas Klein - Log content of the logger is also transmitted",
        "info": "",
        "x": 320,
        "y": 620,
        "wires": []
    },
    {
        "id": "c088b5a58a400b81",
        "type": "debug",
        "z": "235d79d7c2f26625",
        "g": "e3a51bcf9ce90b3a",
        "name": "GPS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 100,
        "wires": []
    },
    {
        "id": "40732747272089ce",
        "type": "udp in",
        "z": "235d79d7c2f26625",
        "g": "e3a51bcf9ce90b3a",
        "name": "",
        "iface": "",
        "port": "8500",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "9b79aa0b93f5fe69"
            ]
        ]
    },
    {
        "id": "9b79aa0b93f5fe69",
        "type": "function",
        "z": "235d79d7c2f26625",
        "g": "e3a51bcf9ce90b3a",
        "name": "Extract GPS",
        "func": "//Example of data received:\n//GPRMC,123519,A,4807.038,N,01131.000,E,022.4,084.4,230394,003.1,\nvar symblat = \"\";\nvar symblong = \"\";\n\nmsg.string = msg.payload.split(\",\");\n\nif(msg.string[1] == \"\"){\n    msg.payload = {};\n    return;\n}\n\n//Find if latitude is south and add minus\nif (msg.string[4] == \"S\") {\n    symblat = \"-\";\n    \n} else {\n}\n//Find if longitude is west and add minus\nif (msg.string[6] == \"W\") {\n    symblong = \"-\";\n    \n} else {\n}\nvar nvals = msg.payload.match(/,(\\d+)(\\d\\d\\.\\d+),(N|S)/);\nvar evals = msg.payload.match(/,(\\d+)(\\d\\d\\.\\d+),(E|W)/);\nvar time = parseInt(msg.string[1]);\nvar time2 = Date.parse(time);\nmsg.payload = {\n    //time:       new Date(time),\n    time:       new Date(),\n    latitude:   parseFloat(symblat + (+nvals[1] + nvals[2]/60).toFixed(6)),\n    longitude:  parseFloat(symblong + (+evals[1] + evals[2]/60).toFixed(6)),\n    speed:      parseFloat(msg.string[7]) || 0,\n    course:     parseFloat(msg.string[8]) || 0\n}\nflow.set(\"latitude\", parseFloat(symblat + (+nvals[1] + nvals[2] / 60).toFixed(6)));\nflow.set(\"longitude\", parseFloat(symblong + (+evals[1] + evals[2] / 60).toFixed(6)));\ndelete msg.string;\nreturn [msg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "e8626651bd1f92c0"
            ]
        ]
    },
    {
        "id": "9672faf7256c33cd",
        "type": "comment",
        "z": "235d79d7c2f26625",
        "g": "e3a51bcf9ce90b3a",
        "name": "GPS Buffer \\n Receives GPS from router and store it into database",
        "info": "",
        "x": 240,
        "y": 80,
        "wires": []
    },
    {
        "id": "e8626651bd1f92c0",
        "type": "function",
        "z": "235d79d7c2f26625",
        "g": "e3a51bcf9ce90b3a",
        "name": "Prepare data",
        "func": "var newMsg = [];\nvar myarray = [];\nvar obj = {\n    measurement: 'Buffer',\n\n    tags: {\n        GpsReceiver: 1,\n    },\n\n    fields: {\n        \n        latitude: parseFloat(msg.payload.latitude),\n        longitude: parseFloat(msg.payload.longitude),\n        speed: parseFloat(msg.payload.speed),\n        course: parseFloat(msg.payload.course),\n    },\n    timestamp: new Date(),\n        \n}\nmyarray.push(obj);\n\n\nnewMsg = { payload: myarray };\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "c088b5a58a400b81",
                "307ad4e15609ed38"
            ]
        ]
    },
    {
        "id": "307ad4e15609ed38",
        "type": "influxdb batch",
        "z": "235d79d7c2f26625",
        "g": "e3a51bcf9ce90b3a",
        "influxdb": "c650078577625659",
        "precision": "",
        "retentionPolicy": "",
        "name": "Store GPS data",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "hyfive",
        "bucket": "GpsBuffer",
        "x": 850,
        "y": 140,
        "wires": []
    },
    {
        "id": "72f255931df7aa4e",
        "type": "inject",
        "z": "235d79d7c2f26625",
        "g": "e3a51bcf9ce90b3a",
        "name": "GPRMC (1sec)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "GPRMC,123519,A,5529.60,N,1235.03,E,022.4,084.4,230394,003.1,",
        "payloadType": "str",
        "x": 180,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2e67ef5c2b79a087",
        "type": "debug",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "debug data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 360,
        "wires": []
    },
    {
        "id": "8465c9da0d1737cd",
        "type": "function",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "Prepare data",
        "func": "var v;\nvar newmsg = [];\n\n//var data = flow.get(\"measured_data\");\nvar data = msg.measured_data\nvar meta = msg.meta_data\n//var meta = flow.get(\"meta_data\");\n\nif (msg.payload.length != 0) {\n    data.latitude = msg.payload[0].latitude,\n    data.longitude = msg.payload[0].longitude,\n    data.speed = msg.payload[0].speed,\n    data.course = msg.payload[0].course\n}else{\n    data.latitude = -999,\n    data.longitude = -999,\n    data.speed = -999,\n    data.course = -999\n}\n\nnewmsg = {\n    payload: [{\n        measurement: 'netcdf',\n        tags: meta,\n        fields: data,\n        //timestamp: new Date(flow.get(\"time\"))\n        timestamp: new Date(msg.time)\n    }]\n}\n\nreturn [newmsg]\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "2e67ef5c2b79a087"
            ]
        ]
    },
    {
        "id": "b78cf2e5ebb1fad6",
        "type": "mqtt in",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "",
        "topic": "hyfive/data",
        "qos": "2",
        "datatype": "json",
        "broker": "ed4cd49e795775da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 360,
        "wires": [
            [
                "6ec1fb246bc5c580"
            ]
        ]
    },
    {
        "id": "53c5c3bd05b33452",
        "type": "influxdb in",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "influxdb": "c650078577625659",
        "name": "ReadFromGpsBuffer",
        "query": "",
        "rawOutput": false,
        "precision": "s",
        "retentionPolicy": "3d",
        "org": "hyfive",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "8465c9da0d1737cd"
            ]
        ]
    },
    {
        "id": "3516da098d750ae6",
        "type": "debug",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "debug header",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 500,
        "wires": []
    },
    {
        "id": "0035eb8d27960abc",
        "type": "function",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "Prepare Header",
        "func": "var newMsg = [];\nvar item;\n\nif(msg.payload.parameter == \"logger\"){\n    item = {\n        measurement: 'attributes',\n        tags: {\n            logger_id: parseInt(msg.payload.logger_id),\n            deployment_id: parseInt(msg.payload.deployment_id),\n            parameter: msg.payload.parameter,\n        },\n        fields: {\n            deckunit_id: parseInt(msg.payload.deckunit_id),\n            platform_id: parseInt(msg.payload.platform_id),\n            vessel_id: parseInt(msg.payload.vessel_id),\n            vessel_name: msg.payload.vessel_name,\n            contact_id: parseInt(msg.payload.deployment_contact_id),\n            contact_f_name: msg.payload.contact_first_name,\n            contact_l_name: msg.payload.contact_last_name\n        },\n        timestamp: new Date()\n    }\n}else{\n    item = {\n        measurement: 'attributes',\n        tags: {\n            logger_id: parseInt(msg.payload.logger_id),\n            deployment_id: parseInt(msg.payload.deployment_id),\n            parameter: msg.payload.sensor_type.parameter,\n        },\n        fields: {\n            unit: msg.payload.sensor_type.unit,\n            long_name: msg.payload.sensor_type.long_name,\n            sensor_id: parseFloat(msg.payload.sensor_id),\n            serial_number: msg.payload.serial_number,\n            sensor_type_id: parseInt(msg.payload.sensor_type.sensor_type_id),\n            k0: msg.payload.calib_coeff[0],\n            k1: msg.payload.calib_coeff[1],\n            k2: msg.payload.calib_coeff[2],\n            k3: msg.payload.calib_coeff[3],\n            k4: msg.payload.calib_coeff[4],\n            k5: msg.payload.calib_coeff[5],\n            k6: msg.payload.calib_coeff[6],\n            k7: msg.payload.calib_coeff[7],\n            k8: msg.payload.calib_coeff[8],\n            k9: msg.payload.calib_coeff[9],\n            manufacturer: msg.payload.sensor_type.manufacturer,\n            model_name: msg.payload.sensor_type.model,\n            accuracy: msg.payload.sensor_type.accuracy,\n            resolution: msg.payload.sensor_type.resolution,\n        },\n        timestamp: new Date()\n    }\n}\n\nnewMsg = {payload: [item]}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 500,
        "wires": [
            [
                "3516da098d750ae6"
            ]
        ]
    },
    {
        "id": "cf836f97f67354e4",
        "type": "influxdb batch",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "influxdb": "c650078577625659",
        "precision": "",
        "retentionPolicy": "",
        "name": "Store data",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "hyfive",
        "bucket": "localhyfive",
        "x": 1120,
        "y": 420,
        "wires": []
    },
    {
        "id": "1a4ed3d0ccd679f3",
        "type": "comment",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "Handeling Measuring Data\\n Receives measurement data from logger and merge data with GPS and store it into database",
        "info": "",
        "x": 370,
        "y": 300,
        "wires": []
    },
    {
        "id": "3694f73ab0251d57",
        "type": "comment",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "Handling Meta Data (Header)\\n Receives the header data (containing meta information) and stores it into database",
        "info": "",
        "x": 340,
        "y": 440,
        "wires": []
    },
    {
        "id": "152d82c1f6572be3",
        "type": "mqtt in",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "",
        "topic": "hyfive/header",
        "qos": "2",
        "datatype": "json",
        "broker": "ed4cd49e795775da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 500,
        "wires": [
            [
                "0035eb8d27960abc"
            ]
        ]
    },
    {
        "id": "1a184bbc90b12b9a",
        "type": "mqtt in",
        "z": "235d79d7c2f26625",
        "g": "05c65e7773bbf544",
        "name": "",
        "topic": "hyfive/nodeRedRequest",
        "qos": "2",
        "datatype": "utf8",
        "broker": "ed4cd49e795775da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "9e4316360e614887"
            ]
        ]
    },
    {
        "id": "9e4316360e614887",
        "type": "mqtt out",
        "z": "235d79d7c2f26625",
        "g": "05c65e7773bbf544",
        "name": "",
        "topic": "hyfive/nodeRedLogin",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ed4cd49e795775da",
        "x": 410,
        "y": 1020,
        "wires": []
    },
    {
        "id": "bb4e6c9996a8b0ed",
        "type": "comment",
        "z": "235d79d7c2f26625",
        "g": "05c65e7773bbf544",
        "name": "Node-Red availability test for logger",
        "info": "Befor the logger sends data to the MQTT broker of the router, it is checking via this flow, if Node-Red is listening",
        "x": 190,
        "y": 980,
        "wires": []
    },
    {
        "id": "577f9431848c9e62",
        "type": "mqtt in",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "name": "",
        "topic": "hyfive/status",
        "qos": "0",
        "datatype": "json",
        "broker": "ed4cd49e795775da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 660,
        "wires": [
            [
                "c0a6a9e3b388938a",
                "38ca7b97b69cad81"
            ]
        ]
    },
    {
        "id": "c0a6a9e3b388938a",
        "type": "function",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "name": "prep file and SFTP",
        "func": "var newMsg = []\nvar date = Date.now()\n\nvar logger_id = parseInt(msg.payload.logger_id)\n\nvar content = {\n    logger_id: logger_id.toString(),\n    battery_remaining: msg.payload.battery_remaining/100,\n    memory_capacity_total: msg.payload.memory_capacity_total,\n    memory_capacity_used: msg.payload.memory_capacity_used,\n    deckbox_position_last: {\n        lat: flow.get(\"latitude\"),\n        lng: flow.get(\"longitude\"),\n        date: date\n    }\n}\n\nvar logger_name = \"logger_\"\nif(logger_id < 10){\n    logger_name += \"0\" + logger_id\n}else{\n    logger_name += logger_id//.toString()\n}\n\nvar file_name = logger_name + \"_status_\" + date + \".json\"\nvar local_path = \"/usr/src/node-red/\" + file_name\nvar remote_path = \"/in/status/\" + logger_name + \"/\" + file_name\n\n\nnewMsg = {\n    payload:        content,\n    filename:       file_name,\n    file_name:      file_name,\n    localFilePath:  local_path,\n    remoteFilePath: remote_path\n}\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 660,
        "wires": [
            [
                "32b4d1856c206b65"
            ]
        ]
    },
    {
        "id": "32b4d1856c206b65",
        "type": "file",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 540,
        "y": 660,
        "wires": [
            [
                "f4403be171a169fb"
            ]
        ]
    },
    {
        "id": "f4403be171a169fb",
        "type": "SFTP-main",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "path": "/",
        "method": "put",
        "remoteFilePath": "",
        "localFilePath": "",
        "remoteDestPath": "/",
        "useCompression": "",
        "encoding": "utf8",
        "mode": "",
        "recursive": "false",
        "server": "e43b951b5fb49639",
        "x": 690,
        "y": 660,
        "wires": [
            [
                "3a82dd7311e8e67e"
            ]
        ]
    },
    {
        "id": "3a82dd7311e8e67e",
        "type": "function",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "name": "rm local file",
        "func": "var newMsg = []\n\nnewMsg = {\n    payload:        \"rm \" + msg.file_name\n}\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 660,
        "wires": [
            [
                "2148df5e37d2f0e5"
            ]
        ]
    },
    {
        "id": "2148df5e37d2f0e5",
        "type": "exec",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1010,
        "y": 660,
        "wires": [
            [
                "6e029079894d4dae"
            ],
            [],
            []
        ]
    },
    {
        "id": "6e029079894d4dae",
        "type": "debug",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "name": "debug status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 660,
        "wires": []
    },
    {
        "id": "87d216e25d86edb3",
        "type": "comment",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "name": "Status file transmission and forwarding",
        "info": "",
        "x": 200,
        "y": 620,
        "wires": []
    },
    {
        "id": "6ec1fb246bc5c580",
        "type": "function",
        "z": "235d79d7c2f26625",
        "g": "d235e8af49b8ee75",
        "name": "Parse data",
        "func": "var newmsg = [];\n\nvar v;\nvar data = {};\nvar meta = {};\nvar metainformation = [\"logger_id\", \"deployment_id\"];\n\nfor(var i in msg.payload){\n    if(i === \"time\"){\n    }else if (metainformation.indexOf(i) >= 0){\n        meta[i] = parseInt(msg.payload[i])\n    }else{\n        data[i] = parseFloat(msg.payload[i])\n    }\n\n}\n\nvar date = msg.payload.time\nvar date2 = date.substring(0, 19) + '.999Z'\nnewmsg= {\n    time: msg.payload.time,\n    measured_data: data,\n    meta_data: meta,\n    query: 'from(bucket: \"GpsBuffer\") |> range(start:' + date + ' , stop:' + date2 + ') |> filter(fn: (r) => r[\"_measurement\"] == \"Buffer\") |> filter(fn: (r) => r[\"GpsReceiver\"] == \"1\") |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")'}\n\n\nreturn newmsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "53c5c3bd05b33452"
            ]
        ]
    },
    {
        "id": "38ca7b97b69cad81",
        "type": "debug",
        "z": "235d79d7c2f26625",
        "g": "4f91b51bd3efcaf6",
        "name": "hyfive/status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 700,
        "wires": []
    },
    {
        "id": "0e3a64824c9fe8a9",
        "type": "inject",
        "z": "235d79d7c2f26625",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"logger_id\":19,\"battery_remaining\":98,\"memory_capacity_total\":31914983424,\"memory_capacity_used\":14647296}",
        "payloadType": "json",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "c0a6a9e3b388938a"
            ]
        ]
    },
    {
        "id": "0d068ad7ffa1d2a0",
        "type": "inject",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "89f0984a49737a4f"
            ]
        ]
    },
    {
        "id": "89f0984a49737a4f",
        "type": "exec",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "command": "python python_scripts/create_netcdf.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "60",
        "winHide": false,
        "oldrc": false,
        "name": "create_netcdf.py",
        "x": 300,
        "y": 240,
        "wires": [
            [],
            [
                "336f8bd1f37e5372"
            ],
            [
                "9cb25a899b7cec62",
                "336f8bd1f37e5372"
            ]
        ]
    },
    {
        "id": "1b4e817521d2401a",
        "type": "inject",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "name": "inject manually",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 180,
        "wires": [
            [
                "9cb25a899b7cec62"
            ]
        ]
    },
    {
        "id": "9cb25a899b7cec62",
        "type": "exec",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "command": "./handle_data/push_sftp.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "push_sftp.sh",
        "x": 540,
        "y": 240,
        "wires": [
            [
                "9da6eeccf3a03abe"
            ],
            [
                "9da6eeccf3a03abe"
            ],
            [
                "4fad76eba46d667a",
                "9da6eeccf3a03abe"
            ]
        ]
    },
    {
        "id": "2e1b8c984a1cfb2a",
        "type": "debug",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "name": "remove .nc files",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 300,
        "wires": []
    },
    {
        "id": "1fd2e10d6d0a9909",
        "type": "exec",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "command": "rm netcdf/*",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Remove files locally",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "2e1b8c984a1cfb2a"
            ],
            [],
            []
        ]
    },
    {
        "id": "4fad76eba46d667a",
        "type": "function",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "name": "Check for errors",
        "func": "var newMsg = [];\nif (msg.payload.code == 0){\n    newMsg = {payload:{\n        filename:           \"rm netcdf/*\",\n    }}\n} else{\n    return;\n}\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            [
                "1fd2e10d6d0a9909"
            ]
        ]
    },
    {
        "id": "11778414c7dc8a22",
        "type": "comment",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "name": "Create netCDF Files and Transmit to Server\\n A Python file creates .nc files which are transmitted to the SFTP server by a bash script.\\n Files are removed after successfull transmission",
        "info": "",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "ba54b73ee447a343",
        "type": "comment",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "name": "Please check in regularly, if the python scripts on your deck box are up to date",
        "info": "",
        "x": 320,
        "y": 380,
        "wires": []
    },
    {
        "id": "336f8bd1f37e5372",
        "type": "debug",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "name": "Create .nc",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 300,
        "wires": []
    },
    {
        "id": "9da6eeccf3a03abe",
        "type": "debug",
        "z": "d143a3ea3215a888",
        "g": "b16a84d1423b2704",
        "name": "push_sftp.sh",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "d5b4eafcc8f0fb5e",
        "type": "mqtt in",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "",
        "topic": "hyfive/updateConfigRequest",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ed4cd49e795775da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 460,
        "wires": [
            [
                "db5690b938d47abf",
                "b8eaf7c8df1d2656"
            ]
        ]
    },
    {
        "id": "c30522b47bb35d27",
        "type": "mqtt out",
        "z": "a7640f54044b40e8",
        "g": "c393d8003f696aac",
        "name": "",
        "topic": "hyfive/updateConfig",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ed4cd49e795775da",
        "x": 1080,
        "y": 880,
        "wires": []
    },
    {
        "id": "811c258fa2c83e91",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "c393d8003f696aac",
        "name": "updateConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 880,
        "wires": []
    },
    {
        "id": "87cc93507f069455",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "c393d8003f696aac",
        "name": "packet size in bytes",
        "func": "let size = 480; // packet size in bytes 480@512MQTT\nlet buffer = Buffer.from(msg.payload);\nlet parts = [];\n\nfor (let i = 0; i < buffer.length; i += size) {\n    let packet = buffer.slice(i, i + size);\n    parts.push({payload: packet});\n}\n\nreturn [parts]; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 800,
        "wires": [
            [
                "e6e954700566bcc1"
            ]
        ]
    },
    {
        "id": "e6e954700566bcc1",
        "type": "delay",
        "z": "a7640f54044b40e8",
        "g": "c393d8003f696aac",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1080,
        "y": 840,
        "wires": [
            [
                "811c258fa2c83e91",
                "c30522b47bb35d27"
            ]
        ]
    },
    {
        "id": "6983f4d8adcb8a37",
        "type": "mqtt in",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "",
        "topic": "hyfive/ConfigError",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ed4cd49e795775da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 840,
        "wires": [
            [
                "5a97be4b588ea048",
                "dc83fec491f83bcf"
            ]
        ]
    },
    {
        "id": "2ab916f1a24e3feb",
        "type": "comment",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "Logger Config Update\\n A logger can ask for a config update by sending the file name of the current config file via MQTT. \\n This flow checks, if a newer config file is available on this deck box for the given logger ID. \\n If so, the file content is prepared and send via MQTT.",
        "info": "",
        "x": 370,
        "y": 320,
        "wires": []
    },
    {
        "id": "00cc014aa1d9f0b4",
        "type": "comment",
        "z": "a7640f54044b40e8",
        "g": "c393d8003f696aac",
        "name": "transmission to the logger",
        "info": "",
        "x": 1090,
        "y": 740,
        "wires": []
    },
    {
        "id": "5ca61240eca739c3",
        "type": "inject",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "Inject test message",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "logger_02_config_202401151229.json",
        "payloadType": "str",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "b8eaf7c8df1d2656"
            ]
        ]
    },
    {
        "id": "04932228151bb3e1",
        "type": "comment",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "Error info\\n if an error message is sent by the logger during config update, it is stored in a file. \\n This file can be read out or deleted manually.",
        "info": "",
        "x": 330,
        "y": 760,
        "wires": []
    },
    {
        "id": "0ace35db30d4953e",
        "type": "exec",
        "z": "a7640f54044b40e8",
        "g": "c7c31a610a242b5f",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 410,
        "y": 1740,
        "wires": [
            [
                "c7822a6dcfb0c519"
            ],
            [
                "c7822a6dcfb0c519"
            ],
            [
                "c7822a6dcfb0c519"
            ]
        ]
    },
    {
        "id": "e67ed41c79173685",
        "type": "inject",
        "z": "a7640f54044b40e8",
        "g": "c7c31a610a242b5f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ls config/logger_17",
        "payloadType": "str",
        "x": 170,
        "y": 1740,
        "wires": [
            [
                "0ace35db30d4953e"
            ]
        ]
    },
    {
        "id": "c7822a6dcfb0c519",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "c7c31a610a242b5f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1740,
        "wires": []
    },
    {
        "id": "b7994222712a21eb",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "updateConfigRequest result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 460,
        "wires": []
    },
    {
        "id": "1d8d02f13c390148",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "list all configs",
        "func": "var newMsg = [];\n\nvar file_name = msg.payload\nvar index_one = file_name.indexOf(\"_\")\nvar index_two = file_name.indexOf(\"_\", index_one + 1)\nvar index_three = file_name.indexOf(\"_\", index_two + 1)\nvar logger_name = file_name.substring(0, index_two)\nvar date_old = parseInt(file_name.substring(index_three + 1, file_name.indexOf(\".\")))\nflow.set(\"date_old\", date_old)\nnewMsg = {payload: \"ls config/\" + logger_name}\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 460,
        "wires": [
            [
                "7a407bab81402bd4"
            ]
        ]
    },
    {
        "id": "7a407bab81402bd4",
        "type": "exec",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 770,
        "y": 460,
        "wires": [
            [
                "b554f318d1f434f2"
            ],
            [],
            []
        ]
    },
    {
        "id": "b554f318d1f434f2",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "check for newer config",
        "func": "var newMsg = [];\n\nvar filenames = msg.payload.split(\"\\n\")\nfilenames.pop()\nvar last_file = filenames.pop()         // last in the list and therefore newest date\n\nvar index_one = last_file.indexOf(\"_\")\nvar index_two = last_file.indexOf(\"_\", index_one + 1)\nvar index_three = last_file.indexOf(\"_\", index_two + 1)\nvar date_most_recent = parseInt(last_file.substring(index_three + 1, last_file.indexOf(\".\")))\n\nvar date_old = flow.get(\"date_old\")\n\nvar to_send = \"\"\nif(date_most_recent > date_old){\n    to_send = last_file\n}else{\n    to_send = \"no_update_available\"\n}\n\nnewMsg = { payload: to_send }\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 460,
        "wires": [
            [
                "b7994222712a21eb",
                "87cc93507f069455"
            ]
        ]
    },
    {
        "id": "9b0ae5c331b4cf39",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "prep config data",
        "func": "var newMsg = [];\nvar file_name = msg.payload\nvar index_one = file_name.indexOf(\"_\")\nvar index_two = file_name.indexOf(\"_\", index_one + 1)\nvar index_three = file_name.indexOf(\"_\", index_two + 1)\nvar logger_name = file_name.substring(0, index_two)\n\nnewMsg = {payload: \"cat config/\" + logger_name + \"/\" + file_name,\n        filename: \"config/\" + logger_name + \"/\" + file_name\n}\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            [
                "7feed9df617cd76f"
            ]
        ]
    },
    {
        "id": "7feed9df617cd76f",
        "type": "exec",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 770,
        "y": 600,
        "wires": [
            [
                "f276d9d25a5d4f73",
                "87cc93507f069455"
            ],
            [],
            []
        ]
    },
    {
        "id": "f276d9d25a5d4f73",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "content of new config file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 600,
        "wires": []
    },
    {
        "id": "42210e89f93227cd",
        "type": "inject",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "Inject test message",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "logger_02_config_202401291305.json",
        "payloadType": "str",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "9948feda627a1911"
            ]
        ]
    },
    {
        "id": "ecf885b39c03e8a7",
        "type": "exec",
        "z": "a7640f54044b40e8",
        "g": "7711c0707ebb443d",
        "command": "./handle_data/get_configs.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "60",
        "winHide": false,
        "oldrc": false,
        "name": "get_configs.sh",
        "x": 440,
        "y": 160,
        "wires": [
            [
                "b79ad6b4ad127a99"
            ],
            [
                "b79ad6b4ad127a99"
            ],
            [
                "b79ad6b4ad127a99"
            ]
        ]
    },
    {
        "id": "7f79980cdfb8e10e",
        "type": "inject",
        "z": "a7640f54044b40e8",
        "g": "7711c0707ebb443d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "ecf885b39c03e8a7"
            ]
        ]
    },
    {
        "id": "c9b6d386c0e8e6c3",
        "type": "comment",
        "z": "a7640f54044b40e8",
        "g": "7711c0707ebb443d",
        "name": "Download all Config Files to Deck Box \\n All config files, which are available on the server, are downloaded in regular intervals to the deck box. \\n They are stored inside the 'nodeRed' docker container.",
        "info": "File path to the config files on the Pi:\n/var/lib/docker/overlay2/a925343a104f0c83e49ca8348d71e11d759638b64810a8e31820b800fc8708d4/merged/usr/src/node-red/config/logger_02/logger_02_config_202401081423.json\n",
        "x": 380,
        "y": 80,
        "wires": []
    },
    {
        "id": "b8eaf7c8df1d2656",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "if 'logger_...'",
        "func": "\nif (msg.payload.startsWith(\"logger_\")) {\n    node.send(msg);\n} else {\n    return null;\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "1d8d02f13c390148"
            ]
        ]
    },
    {
        "id": "db5690b938d47abf",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "if 'update successfull'",
        "func": "\nif (msg.payload.startsWith(\"update successfull\")) {\n    node.send(msg);\n} else {\n    return null;\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 500,
        "wires": [
            [
                "d7202305318b12f7"
            ]
        ]
    },
    {
        "id": "a86b62abb6ece876",
        "type": "comment",
        "z": "a7640f54044b40e8",
        "g": "c7c31a610a242b5f",
        "name": "Print all config files on this deck box for specific logger id",
        "info": "",
        "x": 250,
        "y": 1680,
        "wires": []
    },
    {
        "id": "9f85214ffb77e09d",
        "type": "mqtt in",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "",
        "topic": "hyfive/updateConfigUpload",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ed4cd49e795775da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 600,
        "wires": [
            [
                "9948feda627a1911"
            ]
        ]
    },
    {
        "id": "9948feda627a1911",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "if 'logger_...'",
        "func": "\nif (msg.payload.startsWith(\"logger_\")) {\n    node.send(msg);\n} else {\n    return null;\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 600,
        "wires": [
            [
                "9b0ae5c331b4cf39"
            ]
        ]
    },
    {
        "id": "b79ad6b4ad127a99",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "7711c0707ebb443d",
        "name": "get_configs.sh",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 160,
        "wires": []
    },
    {
        "id": "5a97be4b588ea048",
        "type": "file",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "hyfive_ConfigError",
        "filename": "hyfive_ConfigError.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 450,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "67f70b73cadd6e36",
        "type": "file in",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "",
        "filename": "hyfive_ConfigError.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 420,
        "y": 940,
        "wires": [
            [
                "59f7e26c8f198da8"
            ]
        ]
    },
    {
        "id": "59f7e26c8f198da8",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "read out hyfive_ConfigError.txt",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 940,
        "wires": []
    },
    {
        "id": "27547ac16eab95dc",
        "type": "inject",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "read out",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 940,
        "wires": [
            [
                "67f70b73cadd6e36"
            ]
        ]
    },
    {
        "id": "1f15e4d48c97e4b9",
        "type": "inject",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "delete file content",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "8cedbafa10c85741"
            ]
        ]
    },
    {
        "id": "8cedbafa10c85741",
        "type": "file",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "hyfive_ConfigError",
        "filename": "hyfive_ConfigError.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "777e12fa71c60579"
            ]
        ]
    },
    {
        "id": "777e12fa71c60579",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "delete hyfive_ConfigError.txt",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1000,
        "wires": []
    },
    {
        "id": "dc83fec491f83bcf",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "ConfigError",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 840,
        "wires": []
    },
    {
        "id": "d7202305318b12f7",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "eac9bebee6277097",
        "name": "config update successfull",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 500,
        "wires": []
    },
    {
        "id": "a62f8d250c55ec19",
        "type": "mqtt in",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "",
        "topic": "hyfive/Log",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ed4cd49e795775da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 1300,
        "wires": [
            [
                "31bec43e99c71e07",
                "9fb9e0128caa5441"
            ]
        ]
    },
    {
        "id": "4bb68e3d55373dc6",
        "type": "comment",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "Log info:\\n If a log message is sent by the logger during an event, it is stored in a file.\\n This file can be read or deleted manually.",
        "info": "",
        "x": 310,
        "y": 1220,
        "wires": []
    },
    {
        "id": "31bec43e99c71e07",
        "type": "file",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "hyfive_Log.txt",
        "filename": "hyfive_Log.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 440,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "f3ac1bcfa9936d3b",
        "type": "file in",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "",
        "filename": "hyfive_Log.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 1400,
        "wires": [
            [
                "1b0605e0fe1856de"
            ]
        ]
    },
    {
        "id": "1b0605e0fe1856de",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "read out hyfive_Log.txt",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1400,
        "wires": []
    },
    {
        "id": "4c6d05738c671c26",
        "type": "inject",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "read out",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "f3ac1bcfa9936d3b"
            ]
        ]
    },
    {
        "id": "39d746e1c9dba74c",
        "type": "inject",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "delete file content",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 160,
        "y": 1460,
        "wires": [
            [
                "22c7cf8f4f92b694"
            ]
        ]
    },
    {
        "id": "22c7cf8f4f92b694",
        "type": "file",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "hyfive_Log",
        "filename": "hyfive_Log.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 430,
        "y": 1460,
        "wires": [
            [
                "95b88dedb987387f"
            ]
        ]
    },
    {
        "id": "95b88dedb987387f",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "delete hyfive_Log.txt",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1460,
        "wires": []
    },
    {
        "id": "9fb9e0128caa5441",
        "type": "debug",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "Log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1300,
        "wires": []
    },
    {
        "id": "a00c80cd5e72cb28",
        "type": "file in",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "Read hyfive_Log.txt",
        "filename": "hyfive_Log.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 360,
        "y": 1560,
        "wires": [
            [
                "80f4100bb2e7945a"
            ]
        ]
    },
    {
        "id": "80f4100bb2e7945a",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "Prepare Download",
        "func": "const buffer = Buffer.from(msg.payload, 'utf8');\n\nmsg.headers = {\n    'Content-Type': 'text/plain',\n    'Content-Disposition': 'attachment; filename=hyfive_Log.csv'\n};\nmsg.payload = buffer;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1560,
        "wires": [
            [
                "dd6973f88d73ed5b"
            ]
        ]
    },
    {
        "id": "766b5e068fbf424d",
        "type": "http in",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "GET /download-log",
        "url": "/download-log",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1560,
        "wires": [
            [
                "a00c80cd5e72cb28"
            ]
        ]
    },
    {
        "id": "dd6973f88d73ed5b",
        "type": "http response",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "Send Download",
        "statusCode": "",
        "headers": {},
        "x": 760,
        "y": 1560,
        "wires": []
    },
    {
        "id": "42cfc5d954434379",
        "type": "comment",
        "z": "a7640f54044b40e8",
        "g": "75a251e6f08db58f",
        "name": "http://10.8.0.18:1880/download-log",
        "info": "",
        "x": 200,
        "y": 1520,
        "wires": []
    },
    {
        "id": "7bd0c79a8dea08fa",
        "type": "file in",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "Read hyfive_ConfigError.txt",
        "filename": "hyfive_ConfigError.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 1100,
        "wires": [
            [
                "4f436ed398bbf462"
            ]
        ]
    },
    {
        "id": "4f436ed398bbf462",
        "type": "function",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "Prepare Download",
        "func": "const buffer = Buffer.from(msg.payload, 'utf8');\n\nmsg.headers = {\n    'Content-Type': 'text/plain',\n    'Content-Disposition': 'attachment; filename=hyfive_ConfigError.csv'\n};\nmsg.payload = buffer;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1100,
        "wires": [
            [
                "f89c237b44c64fb9"
            ]
        ]
    },
    {
        "id": "f89c237b44c64fb9",
        "type": "http response",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "Send Download",
        "statusCode": "",
        "headers": {},
        "x": 800,
        "y": 1100,
        "wires": []
    },
    {
        "id": "cc0b69940f13e83b",
        "type": "comment",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "http://10.8.0.18:1880/download-errorlog",
        "info": "",
        "x": 210,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a315a853ec8dc09c",
        "type": "http in",
        "z": "a7640f54044b40e8",
        "g": "f9a071104f7b9747",
        "name": "GET /download-errorlog",
        "url": "/download-errorlog",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1100,
        "wires": [
            [
                "7bd0c79a8dea08fa"
            ]
        ]
    },
    {
        "id": "be17ab4d342f61da",
        "type": "inject",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "Start the test",
        "props": [
            {
                "p": "deployment_id",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "ee9ee001bd91fe92"
            ]
        ]
    },
    {
        "id": "84647e78a544dafa",
        "type": "split",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "38d4d5b3d57e36bd"
            ]
        ]
    },
    {
        "id": "9e562fe175dc8959",
        "type": "debug",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "test data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 420,
        "wires": []
    },
    {
        "id": "e09b1cb407eeb036",
        "type": "split",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 470,
        "y": 360,
        "wires": [
            [
                "4bf3b174ee70ecfd"
            ]
        ]
    },
    {
        "id": "79582086a8c792f7",
        "type": "mqtt out",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "",
        "topic": "hyfive/header",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ed4cd49e795775da",
        "x": 1040,
        "y": 280,
        "wires": []
    },
    {
        "id": "cfb73944982d7e59",
        "type": "mqtt out",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "",
        "topic": "hyfive/data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ed4cd49e795775da",
        "x": 1030,
        "y": 360,
        "wires": []
    },
    {
        "id": "38d4d5b3d57e36bd",
        "type": "json",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "4df787757bfcb278",
                "79582086a8c792f7"
            ]
        ]
    },
    {
        "id": "250ac6bd7b36f893",
        "type": "json",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 360,
        "wires": [
            [
                "9e562fe175dc8959",
                "cfb73944982d7e59"
            ]
        ]
    },
    {
        "id": "ee9ee001bd91fe92",
        "type": "function",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "test data",
        "func": "var header = [];\nvar values = []\nvar deployment_id = msg.deployment_id\n\nheader = {\n    payload: [\n        { \"logger_id\": 1, \"deployment_id\": 1, \"parameter\": \"logger\", \"deckunit_id\": 1, \"platform_id\": 1, \"vessel_id\": 1, \"vessel_name\": \"TEST\", \"deployment_contact_id\": deployment_id,\"contact_first_name\":\"Max\",\"contact_last_name\":\"Mustermann\"},\n        { \"sensor_id\": 1, \"sample_periode_multiplier\": \"1\", \"sample_cast_periode_multiplier\": \"1\", \"bus_address\": 1, \"calib_coeff\": { \"1\": 2, \"2\": 1, \"3\": 1, \"4\": 123, \"5\": 12, \"6\": 1, \"7\": 1 }, \"serial_number\": \"nan\", \"sensor_type\": { \"sensor_type_id\": 1, \"parameter\": \"temperature\", \"long_name\": \"temperature_in_sea_water\", \"unit\": \"mbar\", \"manufacturer\": \"test\", \"model\": \"test\", \"parameter_no\": 1, \"accuracy\": 0, \"resolution\": 0 }, \"logger_id\": 1, \"deployment_id\": deployment_id },\n        { \"sensor_id\": 2, \"sample_periode_multiplier\": \"1\", \"sample_cast_periode_multiplier\": \"1\", \"bus_address\": 2, \"calib_coeff\": {}, \"serial_number\": \"nan\", \"sensor_type\": { \"sensor_type_id\": 2, \"parameter\": \"conductivity\", \"long_name\": \"sea_water_conductivity\", \"unit\": \"mS/cm\", \"manufacturer\": \"test\", \"model\": \"test\", \"parameter_no\": 1, \"accuracy\": 5, \"resolution\": 0.01 }, \"logger_id\": 1, \"deployment_id\": deployment_id },\n        { \"sensor_id\": 3, \"sample_periode_multiplier\": \"1\", \"sample_cast_periode_multiplier\": \"1\", \"bus_address\": 4, \"calib_coeff\": {}, \"serial_number\": \"nan\", \"sensor_type\": { \"sensor_type_id\": 3, \"parameter\": \"pressure\", \"long_name\": \"sea_water_pressure\", \"unit\": \"mbar\", \"manufacturer\": \"test\", \"model\": \"test\", \"parameter_no\": 1, \"accuracy\": 5, \"resolution\": 0.01 }, \"logger_id\": 1, \"deployment_id\": deployment_id }\n    ]\n}\n\nvar myarray = []\nvar pressure = 993\nvar temperature = 15\nvar conductivity = 10\nvar factor = 1\nfor(var i = 30; i > 0; i--){\n    pressure += factor * 98\n    temperature += factor * 0.13\n    conductivity += factor * 0.122\n    if(i == 16){\n        factor = -1\n    }\n    var item = { \"logger_id\": 1, \"deployment_id\": deployment_id,\"pressure\": pressure,\"temperature\": temperature,\"conductivity\": conductivity,\"time\": new Date(msg.payload - 1000 * i)}\n    myarray.push(item)\n}\n\nvalues = {\n    payload: myarray\n}\n\nreturn [header, values];\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "84647e78a544dafa"
            ],
            [
                "e09b1cb407eeb036"
            ]
        ]
    },
    {
        "id": "4df787757bfcb278",
        "type": "debug",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "test header",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 220,
        "wires": []
    },
    {
        "id": "4bf3b174ee70ecfd",
        "type": "delay",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "Limiting to 20 msg/s",
        "pauseType": "rate",
        "timeout": "1000",
        "timeoutUnits": "milliseconds",
        "rate": "20",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 360,
        "wires": [
            [
                "250ac6bd7b36f893"
            ]
        ]
    },
    {
        "id": "687c3af5de393187",
        "type": "influxdb in",
        "z": "1df76267ee5a734d",
        "g": "eb38eefd71aee74d",
        "influxdb": "c650078577625659",
        "name": "get test data from database",
        "query": "",
        "rawOutput": false,
        "precision": "s",
        "retentionPolicy": "3d",
        "org": "hyfive",
        "x": 540,
        "y": 600,
        "wires": [
            [
                "760ea99ca3aa6fd8"
            ]
        ]
    },
    {
        "id": "e871af5d042cd0a1",
        "type": "inject",
        "z": "1df76267ee5a734d",
        "g": "eb38eefd71aee74d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "505b6b7957eb6d72"
            ]
        ]
    },
    {
        "id": "760ea99ca3aa6fd8",
        "type": "debug",
        "z": "1df76267ee5a734d",
        "g": "eb38eefd71aee74d",
        "name": "read test from InfluxDB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 600,
        "wires": []
    },
    {
        "id": "f7aac55c9e7bc23f",
        "type": "comment",
        "z": "1df76267ee5a734d",
        "g": "802fcbdea71ca4de",
        "name": "TESTING YOUR DECKBOX \\n This flow simulates a logger sending measurement data via MQTT (with logger id 01 and deployment id 01.) \\n Inject \"start the test\" and start the netCDF flow manually.  \\n Check if the netcdf file is sent to the server. \\n ATTENTION: If this test is done once on your box, you need to delete deployment 01-01  \\n from python_scripts/recent_deployments.json in the nodeRed container (check docu on Github for this).",
        "info": "",
        "x": 420,
        "y": 120,
        "wires": []
    },
    {
        "id": "f7484f1dad32a2b9",
        "type": "comment",
        "z": "1df76267ee5a734d",
        "g": "eb38eefd71aee74d",
        "name": "Check if test deployment is in local InfluxDB",
        "info": "",
        "x": 210,
        "y": 540,
        "wires": []
    },
    {
        "id": "505b6b7957eb6d72",
        "type": "function",
        "z": "1df76267ee5a734d",
        "g": "eb38eefd71aee74d",
        "name": "Query",
        "func": "var newmsg = [];\n\nvar date = String (new Date (msg.payload))\n// var date2 = date.substring(0, 19) + '.999Z'\nnewmsg= {\n    date: date,\n    query: 'from(bucket: \"localhyfive\")|> range(start: 2024-01-01T00:00:00Z)  |> filter(fn: (r) => r[\"deployment_id\"] == \"1\") |> filter(fn: (r) => r[\"logger_id\"] == \"1\")'\n    }\n\nreturn newmsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 600,
        "wires": [
            [
                "687c3af5de393187"
            ]
        ]
    }
]